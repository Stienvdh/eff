Effect Print: string -> unitEffect Read: unit -> stringEffect RandomInt: int -> intEffect RandomFloat: float -> float_ocaml_tophandler: τ₂ -> τ₂ = _ocaml_tophandler_var_1 (* = *): τ₃ -> τ₃ -> bool = =_var_2 (* < *): τ₄ -> τ₄ -> bool = <failwith: string -> τ₅ = failwithinfinity: float = infinityneg_infinity: float = neg_infinitynan: float = nan_var_7 (* ~- *): int -> int = ~-_var_8 (* + *): int -> int -> int = +_var_9 (* * *): int -> int -> int = *_var_10 (* - *): int -> int -> int = -mod: int -> int -> int = mod_var_12 (* ~-. *): float -> float = ~-._var_13 (* +. *): float -> float -> float = +._var_14 (* *. *): float -> float -> float = *._var_15 (* -. *): float -> float -> float = -._var_16 (* /. *): float -> float -> float = /._var_17 (* ** *): int -> int -> int = **_var_18 (* / *): int -> int -> int = /exp: float -> float = expexpm1: float -> float = expm1log: float -> float = loglog1p: float -> float = log1pcos: float -> float = cossin: float -> float = sintan: float -> float = tanacos: float -> float = acosasin: float -> float = asinatan: float -> float = atansqrt: float -> float = sqrtfloat_of_int: int -> float = float_of_intint_of_float: float -> int = int_of_float_var_32 (* ^ *): string -> string -> string = ^string_length: string -> int = string_lengthstring_of_float: float -> string = string_of_floatstring_of_int: int -> string = string_of_int| None | Some of τ₆ ;  let f9 = fun (x) -> x in let f8 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f9 x in let f7 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f8 x in let f6 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f7 x in let f5 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f6 x in let f4 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f5 x in let f3 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f4 x in let f2 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f3 x in let f1 = fun (x) -> fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f2 x in fun (x1) -> fun (x2) -> fun (x) -> x x1 fun (x) -> x x2 f1 3